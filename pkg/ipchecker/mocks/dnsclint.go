// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ipchecker/dnsclient.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	dns "github.com/miekg/dns"
)

// MockDNSClient is a mock of DNSClient interface.
type MockDNSClient struct {
	ctrl     *gomock.Controller
	recorder *MockDNSClientMockRecorder
}

// MockDNSClientMockRecorder is the mock recorder for MockDNSClient.
type MockDNSClientMockRecorder struct {
	mock *MockDNSClient
}

// NewMockDNSClient creates a new mock instance.
func NewMockDNSClient(ctrl *gomock.Controller) *MockDNSClient {
	mock := &MockDNSClient{ctrl: ctrl}
	mock.recorder = &MockDNSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNSClient) EXPECT() *MockDNSClientMockRecorder {
	return m.recorder
}

// Exchange mocks base method.
func (m *MockDNSClient) Exchange(arg0 *dns.Msg, arg1 string) (*dns.Msg, time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exchange", arg0, arg1)
	ret0, _ := ret[0].(*dns.Msg)
	ret1, _ := ret[1].(time.Duration)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Exchange indicates an expected call of Exchange.
func (mr *MockDNSClientMockRecorder) Exchange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockDNSClient)(nil).Exchange), arg0, arg1)
}
